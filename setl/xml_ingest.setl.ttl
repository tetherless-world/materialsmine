@prefix rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:          <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:           <http://www.w3.org/2001/XMLSchema#> .
@prefix owl:           <http://www.w3.org/2002/07/owl#> .
@prefix skos:          <http://www.w3.org/2004/02/skos/core#> .
@prefix prov:          <http://www.w3.org/ns/prov#> .
@prefix sio:           <http://semanticscience.org/resource/> .
@prefix dcat:          <http://www.w3.org/ns/dcat#> .
@prefix dcterms:       <http://purl.org/dc/terms/> .
@prefix void:          <http://rdfs.org/ns/void#> .
@prefix foaf:          <http://xmlns.com/foaf/0.1/> .
@prefix ov:            <http://open.vocab.org/terms/> .
@prefix setl:          <http://purl.org/twc/vocab/setl/> .
@prefix csvw:          <http://www.w3.org/ns/csvw#> .
@prefix pv:            <http://purl.org/net/provenance/ns#>.
@prefix sp:            <http://spinrdf.org/sp#>.
@prefix dc:			   <http://purl.org/dc/elements/1.1/>.
@prefix api_vocab: <http://purl.org/linked-data/api/vocab#>.

@prefix :              <http://nanomine.org/setl/xml/> .

@prefix nanopub: <http://www.nanopub.org/nschema#> .

:property_classes_table a csvw:Table, setl:Table;
  prov:wasGeneratedBy [
    a setl:Extract;
    prov:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1806836834>;
  ].

:characterization_methods_table a csvw:Table, setl:Table;
  prov:wasGeneratedBy [
    a setl:Extract;
    prov:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=798992913>;
  ].

:processing_methods_table a csvw:Table, setl:Table;
  prov:wasGeneratedBy [
    a setl:Extract;
    prov:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=798992913>;
  ].

:xml a setl:XML;
  prov:wasGeneratedBy [
     a setl:Extract;
     prov:used [ a <http://nanomine.org/ns/NanomineXMLFile> ];
  ].


:NanomineXMLImport rdfs:subClassOf setl:SemanticETLScript;
  rdfs:label "Nanomine XML Import SETL Script";
  setl:hasTemplatePrefix "http://nanomine.org/setl/xml/";
  rdfs:subClassOf [ a owl:Restriction;
    owl:onProperty prov:used;
    owl:someValuesFrom <http://nanomine.org/ns/NanomineXMLFile>
  ].

:get_uuid a owl:Class, prov:SoftwareAgent, setl:PythonScript;
  rdfs:subClassOf prov:Activity;
  prov:value '''
def result():
	from uuid import uuid4 
	return uuid4().hex
'''.

:nanopubs a void:Dataset, dcat:Dataset;
  prov:wasGeneratedBy [a :NanomineXMLImport], [
    a setl:Transform, setl:JSLDT;
    prov:used :xml;
    prov:qualifiedUsage [ a prov:Usage; prov:entity :property_classes_table; prov:hadRole [ dcterms:identifier "properties"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :characterization_methods_table; prov:hadRole [ dcterms:identifier "methods"]];
    prov:qualifiedUsage [ a prov:Usage; prov:entity :processing_methods_table; prov:hadRole [dcterms:identifier "processing"]];
	prov:qualifiedUsage [ a prov:Usage; prov:entity :get_uuid; prov:hadRole [ dcterms:identifier "get_uuid"]];
	setl:hasContext """{
  "owl" : "http://www.w3.org/2002/07/owl#",
  "sio" :     "http://semanticscience.org/resource/",
  "skos" :    "http://www.w3.org/2004/02/skos/core#",
  "dcterms" :    "http://purl.org/dc/terms/",
  "prov" :    "http://www.w3.org/ns/prov#",
  "rdfs" :    "http://www.w3.org/2000/01/rdf-schema#",
  "doi" :    "http://dx.doi.org/",
  "nanomine" :    "http://nanomine.org/ns/",
  "unit" :    "http://nanomine.org/ns/unit/",
  "author" :    "http://nanomine.org/author/",
  "publication" :    "http://nanomine.org/publication/",
  "bibo" : "http://purl.org/ontology/bibo/",
  "foaf" : "http://xmlns.com/foaf/0.1/",
  "nanopub" :    "http://www.nanopub.org/nschema#",
  "entry" :    "http://nanomine.org/entry/",
  "sample" :    "http://nanomine.org/sample/",
  "article" :    "http://nanomine.org/article/",
  "compound" :    "http://nanomine.org/compound/",
  "location" :    "http://nanomine.org/location/",
  "lang" :    "http://nanomine.org/language/",
  "void" :    "http://rdfs.org/ns/void#",
  "dcat" : "http://www.w3.org/ns/dcat#",
  "dc" :	"http://purl.org/dc/elements/1.1/",
  "xsd" : "http://www.w3.org/2001/XMLSchema#"
}""";
    prov:value """[{
	"@for": "id in row.findall('ID')",
	"@do": {
		"@if": "id.text.replace(' ','') is not None",
		"@id": "entry:{{id.text.replace(' ','')}}",
		"@graph": [{
			"@id": "entry:{{id.text.replace(' ','')}}",
			"@type": "nanopub:Nanopublication",
			"nanopub:hasAssertion": {
				"@id": "entry:{{id.text.replace(' ','')}}_assertion",
				"@type": "nanopub:Assertion",
				"@graph": [
					{
						"@if": "row.findtext('Control_ID') is not None",
						"@id": "sample:{{slugify(row.findtext('Control_ID').replace(' ',''))}}",
						"sio:hasRole": {
							"@type": "sio:ControlRole",
							"@id": "sample:{{slugify(row.findtext('Control_ID').replace(' ',''))}}_control_role",
							"sio:inRelationTo": {
								"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
							}
						}
					},
					{
						"@id": "sample:{{slugify(id.text.replace(' ',''))}}",
						"@type": [
							"nanomine:PolymerNanocomposite"
						],
						"sio:hasComponentPart": [{
								"@for": "fc, particle in enumerate(row.findall('MATERIALS/Filler/FillerComponent'))",
								"@do": {
									"@id": "sample:{{slugify(id.text.replace(' ',''))}}_filler_{{fc}}",
									"@type": [{
											"@if": "particle.find('PubChemRef') is not None and particle.find('PubChemRef').text is not None",
											"@id": "pubchem:{{particle.find('PubChemRef').text.replace(' ','')}}",
											"@type": "owl:Class",
											"rdfs:label": [{
													"@value": "{{particle.find('ChemicalName').text}}",
													"@if": "particle.find('ChemicalName').text is not None"
												},
												{
													"@value": "{{particle.find('Abbreviation').text}}",
													"@if": "particle.find('ChemicalName').text is None and particle.find('Abbreviation').text is not None"
												}
											]
										},
										{
											"@if": "(particle.find('PubChemRef') is None or particle.find('PubChemRef').text is None) and particle.find('ChemicalName').text is not None",
											"@id": "compound:{{camelcase(particle.find('ChemicalName').text)}}",
											"@type": "owl:Class",
											"rdfs:label": "{{particle.find('ChemicalName').text}}"
										},
										{
											"@if": "(particle.find('PubChemRef') is None or particle.find('PubChemRef').text is None) and particle.find('ChemicalName').text is None and particle.find('Abbreviation').text is not None",
											"@id": "compound:{{camelcase(particle.find('Abbreviation').text)}}",
											"@type": "owl:Class",
											"rdfs:label": "{{particle.find('Abbreviation').text}}"
										}
									],
									"sio:hasRole": {
										"@type": "nanomine:Filler",
										"sio:inRelationTo": {
											"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
										}
									},
									"sio:hasAttribute": [{
											"@for": ["fraction in [ x for x in [",
												"particle.find('FillerComponentComposition/*'),",
												"row.find('MATERIALS/Filler/FillerComposition/Fraction/*'),",
												"] if x is not None][:1]"
											],
											"@do": {
												"@id": "sample:{{slugify(id.text.replace(' ',''))}}_filler_{{fc}}_{{fraction.tag}}_fraction",
												"sio:hasValue": {
													"@value": "{{fraction.text}}",
													"@type": "xsd:double"
												},
												"@type": "nanomine:{{fraction.tag.title()}}Fraction"
											}
										},



										{
											"@if": "particle.find('Density')",
											"@for": "density in particle.findall('Density')",
											"@do": {
												"@type": "sio:Density",
												"sio:hasValue": {
													"@value": "{{density.find('value').text}}",
													"@type": "xsd:double"
												},
												"sio:hasUnit": [{
													"@if": "density.find('unit')",
													"@id": "unit:{{slugify(density.find('unit').text)}}",
													"rdfs:label": "{{density.find('unit').text}}"
												}]
											}
										},
										{
											"@if": "particle.find('SurfaceArea').find('specific') is not None",
											"@for": "area in particle.findall('SurfaceArea')",
											"@do": {
												"@type": "nanomine:SpecificSurfaceArea",
												"sio:hasValue": {
													"@value": "{{area.find('.//value').text}}",
													"@type": "xsd:double"
												},
												"sio:hasUnit": [{
													"@if": "area.find('.//unit') is not None",
													"@id": "unit:{{slugify(area.find('.//unit').text)}}",
													"rdfs:label": "{{area.find('.//unit').text}}"
												}],
												"sio:hasAttribute": [{
													"@if": "area.find('.//uncertainty')",
													"@type": [
														"sio:UncertaintyValue",
														{
															"@if": "area.find('.//uncertainty/type').text == 'relative'",
															"@id": "sio:Ratio"
														},
														{
															"@if": "area.find('.//uncertainty/type').text == 'absolute'",
															"@id": "sio:StandardDeviation"
														}
													],
													"sio:hasValue": {
														"@value": "{{area.find('.//uncertainty/value').text}}",
														"@type": "xsd:double"
													}
												}]
											}
										},
										{
											"@for": "ratio in particle.findall('ParticleAspectRatio')",
											"@do": {
												"@type": "sio:AspectRatio",
												"sio:hasValue": {
													"@value": "{{ratio.find('value').text}}",
													"@type": "xsd:double"
												},
												"sio:hasUnit": [{
													"@if": "ratio.find('unit') is not None",
													"@id": "unit:{{slugify(ratio.find('unit').text)}}",
													"rdfs:label": "{{ratio.find('unit').text}}"
												}],
												"sio:hasAttribute": [{
													"@if": "ratio.find('.//uncertainty')",
													"@type": [
														"sio:UncertaintyValue",
														{
															"@if": "ratio.find('.//uncertainty/type').text == 'relative'",
															"@id": "sio:Ratio"
														},
														{
															"@if": "ratio.find('.//uncertainty/type').text == 'absolute'",
															"@id": "sio:StandardDeviation"
														}
													],
													"sio:hasValue": {
														"@value": "{{ratio.find('.//uncertainty/value').text}}",
														"@type": "xsd:double"
													}
												}]
											}
										},
										{
											"@for": "size in particle.findall('SphericalParticleDiameter')",
											"@do": {
												"@type": "sio:Width",
												"sio:hasValue": {
													"@value": "{{size.find('value').text}}",
													"@type": "xsd:double"
												},
												"sio:hasUnit": [{
													"@if": "size.find('unit') is not None",
													"@id": "unit:{{slugify(size.find('unit').text)}}",
													"rdfs:label": "{{size.find('unit').text}}"
												}],
												"sio:hasAttribute": [{
													"@if": "size.find('.//uncertainty') is not None",
													"@type": [
														"sio:UncertaintyValue",
														{
															"@if": "size.find('.//uncertainty/type').text == 'relative'",
															"@id": "sio:Ratio"
														},
														{
															"@if": "size.find('.//uncertainty/type').text == 'absolute'",
															"@id": "sio:StandardDeviation"
														}
													],
													"sio:hasValue": {
														"@value": "{{size.find('.//uncertainty/value').text}}",
														"@type": "xsd:double"
													}
												}]
											}
										},
										{
											"@for": "phase in particle.findall('CrystalPhase')",
											"@do": {
												"@type": [
													"nanomine:CrystalPhase",
													{
														"@id": "nanomine:{{camelcase(phase.text)}}",
														"@type": "owl:Class",
														"rdfs:label": "{{phase.text}}",
														"rdfs:subClassOf": {
															"@id": "nanomine:CrystalPhase"
														}
													}
												]
											}
										},
										{
											"@for": "shape in particle.findall('NonSphericalShape')",
											"@do": {
												"sio:hasAttribute": [{
														"@type": "nanomine:NonSpherical",
														"@id": "sio:Shape"
													},
													{
														"@if": "shape.find('.//Width') is not None",
														"@type": "sio:Width",
														"dc:Description": [{
															"@if": "shape.find('..//Width/description').text is not None",
															"@value": "{{shape.find('..//Width/description').text}}"
											            }],
														"sio:hasValue": {
															"@value": "{{shape.find('.//Width/value').text}}",
															"@type": "xsd:double"
														},
														"sio:hasUnit": [{
															"@if": "shape.find('.//Width/unit') is not None",
															"@id": "unit:{{slugify(shape.find('.//Width/unit').text)}}",
															"rdfs:label": "{{shape.find('.//Width/unit').text}}"
														}],
														"sio:hasAttribute": [{
															"@if": "shape.find('.//Width/uncertainty') is not None",
															"@type": [
																"sio:UncertaintyValue",
																{
																	"@if": "shape.find('.//Width/uncertainty/type').text == 'relative'",
																	"@id": "sio:Ratio"
																},
																{
																	"@if": "shape.find('.//Width/uncertainty/type').text == 'absolute'",
																	"@id": "sio:StandardDeviation"
																}
															],
															"sio:hasValue": {
																"@value": "{{shape.find('.//Width/uncertainty/value').text}}",
																"@type": "xsd:double"
															}
														}]
													},
													{
														"@if": "shape.find('.//Length') is not None",
														"@type": "sio:Length",
														"dc:Description": [{
															"@if": "shape.find('..//Length/description').text is not None",
															"@value": "{{shape.find('..//Length/description').text}}"
											            }],
														"sio:hasValue": {
															"@value": "{{shape.find('.//Length/value').text}}",
															"@type": "xsd:double"
														},
														"sio:hasUnit": [{
															"@if": "shape.find('.//Length/unit') is not None",
															"@id": "unit:{{slugify(shape.find('.//Length/unit').text)}}",
															"rdfs:label": "{{shape.find('.//Length/unit').text}}"
														}],
														"sio:hasAttribute": [{
															"@if": "shape.find('.//Length/uncertainty') is not None",
															"@type": [
																"sio:UncertaintyValue",
																{
																	"@if": "shape.find('.//Length/uncertainty/type').text == 'relative'",
																	"@id": "sio:Ratio"
																},
																{
																	"@if": "shape.find('.//Length/uncertainty/type').text == 'absolute'",
																	"@id": "sio:StandardDeviation"
																}
															],
															"sio:hasValue": {
																"@value": "{{shape.find('.//Length/uncertainty/value').text}}",
																"@type": "xsd:double"
															}
														}]
													},
													{
														"@if": "shape.find('.//Depth') is not None",
														"@type": "sio:Depth",
														"dc:Description": [{
															"@if": "shape.find('..//Depth/description').text is not None",
															"@value": "{{shape.find('..//Depth/description').text}}"
											            }],
														"sio:hasValue": {
															"@value": "{{shape.find('.//Depth/value').text}}",
															"@type": "xsd:double"
														},
														"sio:hasUnit": [{
															"@if": "shape.find('.//Depth/unit') is not None",
															"@id": "unit:{{slugify(shape.find('.//Depth/unit').text)}}",
															"rdfs:label": "{{shape.find('.//Depth/unit').text}}"
														}],
														"sio:hasAttribute": [{
															"@if": "shape.find('.//Depth/uncertainty') is not None",
															"@type": [
																"sio:UncertaintyValue",
																{
																	"@if": "shape.find('.//Depth/uncertainty/type').text == 'relative'",
																	"@id": "sio:Ratio"
																},
																{
																	"@if": "shape.find('.//Depth/uncertainty/type').text == 'absolute'",
																	"@id": "sio:StandardDeviation"
																}
															],
															"sio:hasValue": {
																"@value": "{{shape.find('.//Depth/uncertainty/value').text}}",
																"@type": "xsd:double"
															}
														}]
													}

												]
											}
										}


									],
									"sio:isSurroundedBy": [{
										"@for": "surface in particle.findall('ParticleSurfaceTreatment') if len(particle.findall('ParticleSurfaceTreatment')) > 0 else particle.findall('ParticleSurfaceTreatment')",
										"@do": {
											"@id": "sample:{{slugify(id.text.replace(' ',''))}}_filler_{{fc}}_surfacetreatment",
											"@type": [{
													"@if": "surface.find('PubChemRef') is not None and surface.find('PubChemRef').text is not None",
													"@id": "pubchem:{{surface.find('PubChemRef').text.replace(' ','')}}",
													"@type": "owl:Class",
													"rdfs:label": [{
															"@value": "{{surface.find('ChemicalName').text}}",
															"@if": "surface.find('ChemicalName').text is not None"
														},
														{
															"@value": "{{surface.find('Abbreviation').text}}",
															"@if": "surface.find('ChemicalName').text is None and surface.find('Abbreviation').text is not None"
														}
													]
												},
												{
													"@if": "(surface.find('PubChemRef') is None or surface.find('PubChemRef').text is  None) and surface.find('ChemicalName').text is not None",
													"@id": "compound:{{camelcase(surface.find('ChemicalName').text)}}",
													"@type": "owl:Class",
													"rdfs:label": "{{surface.find('ChemicalName').text}}"
												},
												{
													"@if": "(surface.find('PubChemRef') is None or surface.find('PubChemRef').text is None) and surface.find('ChemicalName').text is None and surface.find('Abbreviation').text is not None",
													"@id": "compound:{{camelcase(surface.find('Abbreviation').text)}}",
													"@type": "owl:Class",
													"rdfs:label": "{{surface.find('Abbreviation').text}}"
												}
											],
											"sio:hasRole": {
												"@type": "nanomine:SurfaceTreatment",
												"sio:inRelationTo": {
													"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
												}
											}
										}
									}]
								}
							},
							{
								"@for": "polymer in row.findall('MATERIALS/Matrix/MatrixComponent')",
								"@do": {
									"@id": "sample:{{slugify(id.text.replace(' ',''))}}_matrix",
									"@type": [{
											"@if": "polymer.find('PubChemRef') is not None and polymer.find('PubChemRef').text is not None",
											"@id": "pubchem:{{polymer.find('PubChemRef').text.replace(' ','')}}",
											"@type": "owl:Class",
											"rdfs:label": [{
													"@value": "{{polymer.find('ChemicalName').text}}",
													"@if": "polymer.find('ChemicalName').text is not None"
												},
												{
													"@value": "{{polymer.find('Abbreviation').text}}",
													"@if": "polymer.find('ChemicalName').text is None and polymer.find('Abbreviation').text is not None"
												}
											]
										},
										{
											"@if": "(polymer.find('PubChemRef') is None or polymer.find('PubChemRef').text is None) and polymer.find('ChemicalName').text is not None",
											"@id": "compound:{{camelcase(polymer.find('ChemicalName').text)}}",
											"@type": "owl:Class",
											"rdfs:label": "{{polymer.find('ChemicalName').text}}"
										},
										{
											"@if": "(polymer.find('PubChemRef') is None or polymer.find('PubChemRef').text is None) and polymer.find('ChemicalName').text is None and polymer.find('Abbreviation').text is not None",
											"@id": "compound:{{camelcase(polymer.find('Abbreviation').text)}}",
											"@type": "owl:Class",
											"rdfs:label": "{{polymer.find('Abbreviation').text}}"
										}

									],
									"sio:hasRole": {
										"@type": "nanomine:Matrix",
										"sio:inRelationTo": {
											"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
										}
									},
									"sio:hasAttribute": [{
										"@if": "polymer.find('ManufacturerOrSourceName') is not None",
										"@for": "manufacturer in polymer.findall('ManufacturerOrSourceName')",
										"@do": {
											"@type": "nanomine:Manufacturer",
											"sio:hasValue": "{{manufacturer.text}}"
										}
									},
									{
										"@if": "polymer.find('TradeName') is not None", 
										"@for": "tradename in polymer.findall('TradeName')",
										"@do":{
											"@type": "nanomine:TradeName",
											"sio:hasValue": "{{tradename.text}}"
										}
									},
									{
										"@if": "polymer.find('Abbreviation') is not None",
										"@for": "abbrev in polymer.findall('Abbreviation')",
										"@do":{
											"@type": "nanomine:Abbreviation",
											"sio:hasValue": "{{abbrev.text}}"
										}
									}]
								}
							}
						],
						"@reverse": {
							"prov:specializationOf": [{
								"@for": "i, property in properties.iterrows()",
								"@do": {
									"@if": "not isempty(property.xpath) and row.find('PROPERTIES')",
									"@for": "table in row.find('PROPERTIES').findall('.'+property.xpath+'//data')",
									"@do": {
										"@for": "row in table.findall('rows/row')",
										"@do": [{
											"@if": "row.findall('column')[1].text is not None and row.findall('column')[0].text is not None",
											"@id": "sample:{{slugify(id.text.replace(' ',''))}}_{{slugify(property.uri)}}_{{get_uuid()}}",
											"@type": "{{property.uri}}",
											"dc:Description": [{
												"@if": "table.find('../description').text is not None",
												"@value": "{{table.find('../description').text}}"
											}],
											"sio:hasAttribute": [
												{
													"@type": [{
															"@if": "not isempty(property.curveDependentVar)",
															"@id": "{{property.curveDependentVar}}"
														},
														{
															"@if": "isempty(property.curveDependentVar) and table.findall('headers/column')[1].text is not None",
															"@id": "nanomine:{{camelcase(table.findall('headers/column')[1].text)}}",
															"@type": "owl:Class",
															"rdfs:subClassOf": {
																"@id": "sio:Quantity"
															},
															"rdfs:label": "{{table.findall('headers/column')[1].text}}"
														}
													],
													"sio:hasValue": {
														"@value": "{{row.findall('column')[1].text}}",
														"@type": "xsd:double"
													},
													"dc:Description": [{
														"@if": "table.findall('headers/column')[1].text is not None",
														"@value": "{{table.findall('headers/column')[1].text}}"
													}],
													"sio:inRelationTo": [{
														"@type": [{
																"@if": "not isempty(property.curveIndependentVar)",
																"@id": "{{property.curveIndependentVar}}"
															},
															{
																"@if": "isempty(property.curveIndependentVar) and table.findall('headers/column')[0].text is not None",
																"@id": "nanomine:{{camelcase(table.findall('headers/column')[0].text)}}",
																"@type": "owl:Class",
																"rdfs:subClassOf": {
																	"@id": "sio:Quantity"
																},
																"rdfs:label": "{{table.findall('headers/column')[0].text}}"
															}
														],
														"sio:hasValue": {
															"@value": "{{row.findall('column')[0].text}}",
															"@type": "xsd:double"
														},
														"dc:Description": [{
															"@if": "table.findall('headers/column')[0].text is not None",
															"@value": "{{table.findall('headers/column')[0].text}}"
														}]
													}]
												}
											]
										}]
									}
								}
							}]
						},
						"sio:hasAttribute": [{
							"@for": "i, property in properties.iterrows()",
							"@do": {
								"@if": "not isempty(property.xpath) and row.find('PROPERTIES') and not row.find('PROPERTIES').findall('.'+property.xpath+'/data')",
								"@for": "value in row.find('PROPERTIES').findall('.'+property.xpath)",
								"@do": [{
									"@type": "{{property.uri}}",
									"dc:description": [{
										"@if": "value.find('description') is not None",
										"@value": "{{value.find('description').text}}"
									}],
									"sio:hasValue": [{
										"@if": "value.find('value') is not None",
										"@value": "{{value.find('value').text}}",
										"@type": "xsd:double"
									}],
									"sio:hasUnit": [{
										"@if": "value.find('unit') is not None",
										"@id": "unit:{{slugify(value.find('unit').text)}}",
										"rdfs:label": "{{value.find('unit').text}}"
									}],
									"sio:hasAttribute": [{
										"@for": "uncertainty in value.findall('uncertainty')",
										"@do": {
											"@type": [
												"sio:UncertaintyValue",
												{
													"@if": "uncertainty.find('type').text == 'relative'",
													"@id": "sio:Ratio"
												},
												{
													"@if": "uncertainty.find('type').text == 'absolute'",
													"@id": "sio:StandardDeviation"
												}
											],
											"sio:hasValue": {
												"@value": "{{uncertainty.find('value').text}}",
												"@type": "xsd:double"
											}
										}
									}]
								}]
							}
						}]
					}
				]
			},
			"nanopub:hasPublicationInfo": {
				"@id": "entry:{{id.text.replace(' ','')}}_pubinfo",
				"@type": "nanopub:PublicationInfo",
				"@graph": []
			},
			"nanopub:hasProvenance": {
				"@id": "entry:{{id.text.replace(' ','')}}_provenance",
				"@type": "nanopub:Provenance",
				"@graph": [{
						"@id": "entry:{{id.text.replace(' ','')}}_assertion",
						"prov:wasGeneratedBy": [{
							"@for": "i, method in methods.iterrows()",
							"@do": {
								"@if": "not isempty(method.xpath) and row.findall('.'+method.xpath)",
								"@for": "value in row.findall('.'+method.xpath)",
								"@do": [{
									"@id": "entry:{{id.text.replace(' ','')}}_characterization_{{slugify(value.tag)}}",
									"@type": [
										"prov:Activity",
										"sio:Measuring",
										"{{method.uri}}"
									],
									"dc:description": [{
										"@if": "value.find('Description')",
										"@value": "{{value.find('Description').text}}"
									}],
									"prov:used": [{
										"@for": "equipment in list(value.findall('./Equipment')) + list(value.findall('./EquipmentUsed'))",
										"@do": {
											"@type": [{
													"@id": "nanomine:{{slugify(equipment.text)}}",
													"@type": "owl:Class",
													"rdfs:subClassOf": {
														"@id": "sio:Device"
													},
													"rdfs:label": "{{equipment.text}}"
												},
												"sio:Device"
											],
											"sio:hasAttribute": [{
												"@for": "i, method_attr in methods.iterrows()",
												"@do": {
													"@if": "not isempty('.'+method_attr.xpath) and value.findall('.'+method_attr.xpath)",
													"@type": "method_attr.uri",
													"sio:hasValue": {
														"@value": "{{value.findall('.'+method_attr.xpath)[0].find('value').text}}",
														"@type": "xsd:double"
													},
													"sio:hasUnit": [{
														"@if": "value.findall('.'+method_attr.xpath)[0].find('unit') is not None",
														"@id": "unit:{{slugify(value.findall('.'+method_attr.xpath)[0].find('unit').text)}}",
														"rdfs:label": "{{value.findall('.'+method_attr.xpath)[0].find('unit').text}}"
													}],
													"sio:hasAttribute": [{
														"@if": "value.findall('.'+method_attr.xpath)[0].find('.//uncertainty') is not None",
														"@type": [
															"sio:UncertaintyValue",
															{
																"@if": "value.findall('.'+method_attr.xpath)[0].find('.//uncertainty/type').text == 'relative'",
																"@id": "sio:Ratio"
															},
															{
																"@if": "value.findall('.'+method_attr.xpath)[0].find('.//uncertainty/type').text == 'absolute'",
																"@id": "sio:StandardDeviation"
															}
														],
														"sio:hasValue": {
															"@value": "{{value.findall('.'+method_attr.xpath)[0].find('.//uncertainty/value').text}}",
															"@type": "xsd:double"
														}
													}]
												}
											}]
										}
									}]
								}]
							}
						}]
					},
					{
						"@id": "entry:{{id.text.replace(' ','')}}_material",
						"prov:wasGeneratedBy":
						[
							{
								"@for": "i, process in enumerate(row.findall('PROCESSING/SolutionProcessing/ChooseParameter'))",
								"@do":
								[
									{
										"@type": "nanomine:Other",
										"dc:description":
										[{
											"@if": "process.find('Other') is not None",
											"@value": "{{process.find('Other').text}}"
										}]
										
									},
									{
										"@for": "mix in process.findall('Mixing')",
										"@do":
										{
											"@type": "nanomine:Mixing",
											"dc:description": 
											[{
												"@if": "mix.find('..//Mixing/Description') is not None",
												"@value": "{{mix.find('..//Mixing/Description').text}}"
											}],
											"sio:hasRole":
											{
												"@type": "nanomine:Mixing",
												"@id": "sample:{{slugify(mix.findtext('..//Mixing/MixingMethod').replace(' ',''))}}_mixing_method",
												"sio:inRelationTo":
												{
													"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
												}
											}

										}
									}
								]
								

							
							}
						]
									
						

					},				
					{
						"@for": "citation in row.findall('DATA_SOURCE/Citation')",
						"@do": {
							"@id": "entry:{{id.text.replace(' ','')}}_assertion",
							"prov:generatedAtTime": [{
								"@if": "citation.find('CommonFields/DateOfCitation')",
								"@type": "xsd:date",
								"@value": "{{citation.find('CommonFields/DateOfCitation').text"
							}],
							"prov:wasQuotedFrom": [{
								"@id": "{%if citation.find('CommonFields/DOI') != None %}doi:{{citation.find('CommonFields/DOI').text.replace('<','%3C').replace('>','%3E')}}{%else%}entry:{{id.text.replace(' ','-')}}{%endif%}",
								"@type": [
									"dcterms:BibliographicResource",
									{
										"@id": "{{ {'research article':'nanomine:ResearchArticle','conference proceeding':'nanomine:ProceedingsArticle','communication':'nanomine:Communication','review':'nanomine:ReviewArticle','letter':'bibo:Letter','technical comment':'nanomine:TechnicalComment'}[citation.find('CommonFields/CitationType').text] }}"
									}
								],
								"dcterms:title": "{{citation.find('CommonFields/Title').text}}",
								"rdfs:label": "{{citation.find('CommonFields/Title').text}}",
								"rdfs:seeAlso": {
									"@if": "citation.find('CommonFields/URL').text",
									"@id": "{{citation.find('CommonFields/URL').text.replace('<','%3C').replace('>','%3E')}}"
								},
								"dcterms:created": {
									"@value": "{{citation.find('CommonFields/PublicationYear').text}}",
									"@type": "xsd:integer"
								},
								"bibo:volume": {
									"@if": "citation.find('CommonFields/Volume').text",
									"@value": "{{citation.find('CommonFields/Volume').text}}",
									"@type": "xsd:integer"
								},
								"dcterms:language": {
									"@if": "citation.find('CommonFields/Language').text",
									"@id": "lang:{{slugify(citation.find('CommonFields/Language').text)}}",
									"@type": "dcterms:LinguisticSystem",
									"rdfs:label": "{{citation.find('CommonFields/Language').text}}"
								},
								"dcterms:creator": [{
									"@for": "author in citation.findall('CommonFields/Author')",
									"@do": {
										"@id": "author:{{slugify(author.text)}}",
										"@type": "prov:Agent",
										"foaf:name": "{{author.text}}",
										"rdfs:label": "{{author.text}}",
										"@reverse": {
											"prov:wasAttributedTo": {
												"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
											}
										}
									}
								}],
								"dcterms:isPartOf": {
									"@if": "citation.find('CommonFields/Publication').text",
									"@id": "publication:{{slugify(citation.find('CommonFields/Publication').text)}}",
									"dcterms:title": "{{citation.find('CommonFields/Publication').text}}",
									"dcterms:publisher": {
										"@if": "citation.find('CommonFields/Publisher').text",
										"@id": "publisher:{{slugify(citation.find('CommonFields/Publisher').text)}}",
										"rdfs:label": "{{citation.find('CommonFields/Publisher').text}}",
										"prov:atLocation": {
											"@if": "citation.find('CommonFields/Location').text",
											"@type": "dcterms:Location",
											"@id": "location:{{slugify(citation.find('CommonFields/Location').text)}}",
											"rdfs:label": "{{citation.find('CommonFields/Location').text}}"
										}
									}
								},
								"sio:hasPart": {
									"@id": "sample:{{slugify(id.text.replace(' ',''))}}"
								},
								"dcat:keyword": [{
									"@for": "keyword in citation.findall('CommonFields/Keyword')",
									"@do": [{
											"@if": "';' in keyword.text",
											"@for": "k in re.split('\\\\s*[;]\\\\s*', keyword.text)",
											"@do": "{{k.strip().title()}}"
										},
										{
											"@if": "';' not in keyword",
											"@value": "{{keyword.text.strip().title()}}"
										}
									]
								}]
							}]
						}
					}
				]
			}
		}]
	}
}]"""
  ].

# <nanopubs.trig> a pv:File;
#    dcterms:format "application/trig";
#    prov:wasGeneratedBy [
#      a setl:Load;
#      prov:used :nanopubs ;
#    ].


